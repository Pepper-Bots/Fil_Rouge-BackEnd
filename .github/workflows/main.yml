name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      APP_NAME: admin_mns_back
      CERT_OWNER: Admin MNS
      CERT_DOMAIN: localhost

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Création du fichier application.properties pour la CI
      - name: Create application.properties for CI
        run: |
          cat > src/main/resources/application.properties << EOF
          spring.datasource.url=jdbc:h2:mem:testdb
          spring.datasource.driver-class-name=org.h2.Driver
          spring.datasource.username=sa
          spring.datasource.password=
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.sql.init.mode=never
          jwt.secret=${{ secrets.JWT_SECRET }}
          spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration
          EOF

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Build back-end Java (Spring Boot)
      - name: Build back-end with Maven
        run: mvn clean package -DskipTests

      # (optionnel) Build front-end (Angular)
      # - name: Build front-end
      #   run: |
      #     cd ../../Front/admin-mns-front
      #     npm ci
      #     npm run build

      # Générer les certificats SSL pour NGINX (pour les tests et le build du proxy)
      - name: Generate SSL certs for NGINX
        run: |
          mkdir -p certs
          openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
            -keyout certs/privkey.crt \
            -out certs/fullchain.crt \
            -subj "/C=FR/ST=France/L=Metz/O=${CERT_OWNER}/CN=${CERT_DOMAIN}"

      # Optionnel : Vérification de la config Docker Compose
      - name: Check docker-compose config
        run: docker-compose config

      # Connexion à Docker Hub (pour pouvoir push les images)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build toutes les images via docker-compose (build front, back, proxy, static, etc.)
      - name: Build Docker Compose services
        run: docker-compose build

      # Push des images customisées (back et front, éventuellement static ou proxy)
      - name: Push Back image to Docker Hub
        run: |
          docker tag heleneriz/admin_mns_back:latest ${{ secrets.DOCKER_USERNAME }}/admin_mns_back:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/admin_mns_back:${{ github.sha }}

      # Tag et push l'image front
      - name: Push Front image to Docker Hub
        run: |
          docker tag heleneriz/admin_mns_front:latest ${{ secrets.DOCKER_USERNAME }}/admin_mns_front:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/admin_mns_front:${{ github.sha }}

      # Optionnel : Lancer les containers pour des tests d'intégration (API, front, etc.)
      #- name: Run tests with docker-compose
      #  run: |
      #    docker-compose up -d
      #    # ici tu peux lancer des tests e2e, api, etc.
      #    docker-compose down -v

      # Optionnel mais recommandé: Nettoyage Docker après les jobs
      - name: Clean up Docker
        run: docker system prune -af


#L’ordre recommandé:
#
#  1.Checkout
#
#  2.Créer application.properties
#
#  3.Build Maven (backend)
#
#  4.(Optionnel) Build front Angular
#
#  5.Générer les certificats SSL
#
#  6.Vérifier Docker Compose
#
#  7.Login Docker Hub
#
#  8.Build Docker Compose
#
#  9.Tag/push images
#
#  10.Nettoyage